version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: insider-postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - monitoring

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: insider-api
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: appdb
      DB_USER: app
      DB_PASSWORD: app
      AUTO_MIGRATE: "true"
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - monitoring

  # Prometheus - metrics toplama
  prometheus:
    image: prom/prometheus:latest
    container_name: insider-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - monitoring

  # Grafana - görselleştirme
  grafana:
    image: grafana/grafana:latest
    container_name: insider-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./ops/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring

  # Node Exporter - sistem metrikleri
  node-exporter:
    image: prom/node-exporter:latest
    container_name: insider-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - monitoring

  # cAdvisor - container metrikleri
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: insider-cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--store_container_labels=true"
      - "--whitelisted_container_labels=com.docker.compose.service,com.docker.compose.project,com.docker.compose.container-number"
      - "--docker_only=true"
    privileged: true
    networks:
      - monitoring

  # PostgreSQL Exporter - veritabanı metrikleri
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: insider-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://app:app@postgres:5432/appdb?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - monitoring

volumes:
  pg-data:
  prometheus-data:
  grafana-data:

networks:
  monitoring:
    driver: bridge
